import { GraphQLServiceContext, GraphQLRequestContext, GraphQLRequest, GraphQLResponse } from 'apollo-server-core/dist/requestPipelineAPI';
export { GraphQLServiceContext, GraphQLRequestContext, GraphQLRequest, GraphQLResponse, };
export declare type ValueOrPromise<T> = T | Promise<T>;
export declare type WithRequired<T, K extends keyof T> = T & Required<Pick<T, K>>;
export interface ApolloServerPlugin {
    serverWillStart?(service: GraphQLServiceContext): ValueOrPromise<void>;
    requestDidStart?<TContext>(requestContext: GraphQLRequestContext<TContext>): GraphQLRequestListener<TContext> | void;
}
export interface GraphQLRequestListener<TContext = Record<string, any>> {
    parsingDidStart?(requestContext: WithRequired<GraphQLRequestContext<TContext>, 'metrics' | 'source'>): (err?: Error) => void | void;
    validationDidStart?(requestContext: WithRequired<GraphQLRequestContext<TContext>, 'metrics' | 'source' | 'document'>): (err?: ReadonlyArray<Error>) => void | void;
    didResolveOperation?(requestContext: WithRequired<GraphQLRequestContext<TContext>, 'metrics' | 'source' | 'document' | 'operationName' | 'operation'>): ValueOrPromise<void>;
    responseForOperation?(requestContext: WithRequired<GraphQLRequestContext<TContext>, 'metrics' | 'source' | 'document' | 'operationName' | 'operation'>): ValueOrPromise<GraphQLResponse | null>;
    executionDidStart?(requestContext: WithRequired<GraphQLRequestContext<TContext>, 'metrics' | 'source' | 'document' | 'operationName' | 'operation'>): (err?: Error) => void | void;
    willSendResponse?(requestContext: WithRequired<GraphQLRequestContext<TContext>, 'metrics' | 'response'>): ValueOrPromise<void>;
}
//# sourceMappingURL=index.d.ts.map